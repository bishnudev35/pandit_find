// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Represents a normal user of the application
model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // A user can have multiple addresses
  addresses Address[]
  // A user can make multiple bookings
  bookings  Booking[]
}

// Represents the address of a user
model Address {
  id        String   @id @default(cuid())
  userId    String
  street    String
  city      String
  state     String
  country   String
  zipCode   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Establishes a one-to-many relationship with the User model
  user User @relation(fields: [userId], references: [id])
}

// Represents a pandit (priest)
model Pandit {
  id          String     @id @default(cuid())
  name        String
  email       String     @unique
  password    String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  services    String[]
  rating      Float      @default(0)
  experience  Int
  
  location    Location @relation(fields: [locationId], references: [id])
  locationId  String @unique // Add this line to enforce a one-to-one relationship
  
  bookings    Booking[]
  availability Calendar[]
}
// Represents the location of a Pandit
model Location {
  id        String   @id @default(cuid())
  street    String
  city      String
  state     String
  country   String
  zipCode   String
  latitude  Float
  longitude Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  pandit Pandit?
}

// Represents a booking made by a user for a pandit
model Booking {
  id        String   @id @default(cuid())
  userId    String
  panditId  String
  service   String
  date      DateTime
  time      String
  status    String   @default("pending") // e.g., 'pending', 'confirmed', 'completed', 'canceled'
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Links the booking to a specific user and pandit
  user   User   @relation(fields: [userId], references: [id])
  pandit Pandit @relation(fields: [panditId], references: [id])
}

// Represents the calendar and time slots of a pandit
model Calendar {
  id          String   @id @default(cuid())
  panditId    String
  date        DateTime
  timeSlots   String[] // Array of time slots, e.g., ["9:00", "10:00", "11:00"]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Links the calendar to a specific pandit
  pandit Pandit @relation(fields: [panditId], references: [id])
}