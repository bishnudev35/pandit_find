generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  contactNo String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  addresses Address[]

  bookings Booking[]
}

model Pandit {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  contactNo String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  services   String[]
  rating     Float    @default(0)
  experience Int

  address Location?

  bookings     Booking[]
  availability Calendar[]
}

model Location {
  id        String   @id @default(cuid())
  street    String
  city      String
  state     String
  country   String
  zipCode   String
  latitude  Float?
  longitude Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  panditId String  @unique
  pandit   Pandit? @relation(fields: [panditId], references: [id])
}

model Address {
  id        String   @id @default(cuid())
  street    String
  city      String
  state     String
  country   String
  zipCode   String
  latitude  Float?
  longitude Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId   String?
  user     User?     @relation(fields: [userId], references: [id])
  bookings Booking[] // ✅ One address can be used in multiple bookings
}

model Booking {
  id        String   @id @default(cuid())
  userId    String
  panditId  String
  Otp       Int     @default(0) // One-time password for booking confirmation
  duration  Int
  service   String
  feedback  String?
  status    String   @default("BOOKED") // Possible values: BOOKED, COMPLETED, CANCELLED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  addressId String // ✅ Foreign key to Address
  address   Address @relation(fields: [addressId], references: [id])

  user      User       @relation(fields: [userId], references: [id])
  pandit    Pandit     @relation(fields: [panditId], references: [id])
  timeSlots TimeSlot[] @relation("BookingSlots")
}

model Calendar {
  id       String   @id @default(cuid())
  panditId String
  date     DateTime

  pandit Pandit @relation(fields: [panditId], references: [id])

  timeSlots TimeSlot[]
}

model TimeSlot {
  id         String   @id @default(cuid())
  calendarId String
  startTime  DateTime
  endTime    DateTime
  status     String
  bookingId  String?
  booking    Booking? @relation("BookingSlots", fields: [bookingId], references: [id]) // ✅ relation matched
  calendar   Calendar @relation(fields: [calendarId], references: [id])
}
